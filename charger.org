#+STARTUP: indent
* 充电系统
充电系统在总线空闲时，会定时查询充电器的状态，如果和缓存中的状态不一致，
就把充电状态上报到服务器。
** 基本框架
#+begin_src c :tangle /dev/shm/boxos/charger.h
  #ifndef _CHARGER_H
  #define _CHARGER_H
  #include <stdint.h>
  #include "ring.h"
  #include "uart4-packet.h"

  #define MAX_CHARGER_BIT 2
  #define MAX_CHARGERS (2 << (MAX_CHARGER_BIT - 1))

  void charger_setup(struct ring_t * tx, struct ring_t * rx);
  void charger_start(void);
  void charger_boot_scan(void);
  void charger_eventloop(void);
  void charger_callback(uart4_packet_t * packet);
  void charger_status(uint8_t charger, uint16_t pin);
  void charger_config(uint8_t charger, uint16_t pin);
  void charger_config_exclamation_marks(uint8_t charger, uint8_t enable_charging, uint8_t enable_heating, uint16_t pin);
  void charger_scan(uint8_t charger);
  #endif
#+end_src
#+begin_src c :tangle /dev/shm/boxos/charger.c
  #include <libopencm3/stm32/rcc.h>
  #include <libopencm3/stm32/gpio.h>
  #include "defination.h"
  #include "charger.h"
  #include "packet.h"
  #include "network.h"
  #include "console.h"
  #include "utility.h"
  #include "uart.h"
  #include "ring.h"
  #include "charger-fsm.h"
  #include "uart4-packet.h"

  <<charger-cmd>>

  struct charger_context {
    uint32_t state;
    uint32_t cmd_timer;
    uint32_t cmd_interval;
    uint32_t scan_timer;
    uint32_t scan_interval;
    uint32_t sync_timer;
    uint32_t sync_interval;
    uint32_t retry;
    uint16_t pin;
    uint8_t batteries_len;
    uint8_t enable_charging;
    uint8_t enable_heating;
  };

  static struct charger_context ctxs[MAX_CHARGERS];

  static struct ring_t * charger_tx;
  static struct ring_t * charger_rx;

  static uint32_t loop_timer;
  static uint8_t activated;
  static uint8_t plugged[MAX_CHARGERS];
  static uint8_t charging[MAX_CHARGERS];
  static uint8_t full[MAX_CHARGERS];
  static uint8_t heating[MAX_CHARGERS];
  static uint8_t temperature[MAX_CHARGERS];
  static uint8_t errno[MAX_CHARGERS];
  static uint8_t batteries[MAX_CHARGERS][4];

  <<setup>>
  void charger_start() {
  }

  void charger_boot_scan(void) {
    for (uint8_t i = 0; i < MAX_CHARGERS; i ++) {
      ctxs[i].state = charger_transform_state(ctxs[i].state, CHARGER_ONLINE_COMMA_TX_FREE_EVENT, &i);
    }
  }

  <<mainloop>>
  <<callback>>
  <<query-charger-status>>
  <<query-charger-config>>
  <<config-charger>>
  <<fsm>>
#+end_src
** 配置
#+begin_src c :noweb-ref setup
  void charger_setup(struct ring_t * tx, struct ring_t * rx) {
    charger_tx = tx;
    charger_rx = rx;
    loop_timer = 0;
    activated = 0;

    for (uint8_t i = 0; i < MAX_CHARGERS; i ++) {
      bzero(&ctxs[i], sizeof(struct charger_context));
      ctxs[i].state = CHARGER_READY_STATE;
      ctxs[i].cmd_timer = systick;
      ctxs[i].cmd_interval = 499; // 500 ms
      ctxs[i].sync_timer = systick;
      ctxs[i].sync_interval = 10 * 60 * 1000 - 1; // 10 minutes to timeout
      ctxs[i].scan_timer = systick;
      ctxs[i].scan_interval = 5 * 1000 - 1; // 5 seconds
    }
  }
#+end_src
** 主循环
#+begin_src c :noweb-ref mainloop
  void charger_eventloop() {
    if (systick > loop_timer) {
      loop_timer = systick + 2999; // interval of 3 seconds

      if (network_is_online() && ring_length(charger_tx) == 0) {
        for (uint8_t i = 0; i < MAX_CHARGERS; i ++) {
          if ((activated & (1 << i)) == 0) continue;
          if (ctxs[i].state == CHARGER_READY_STATE || ctxs[i].state == CHARGER_SCANNING_STATE) {
            if (systick > ctxs[i].scan_timer) {
              ctxs[i].scan_timer = systick + ctxs[i].scan_interval;
              ctxs[i].state = charger_transform_state(ctxs[i].state, CHARGER_ONLINE_COMMA_TX_FREE_COMMA_SCAN_TIMER_EVENT, &i);
            } else {
              ctxs[i].state = charger_transform_state(ctxs[i].state, CHARGER_ONLINE_COMMA_TX_FREE_EVENT, &i);
            }
          }
        }
      }
      for (uint8_t i = 0; i < MAX_CHARGERS; i ++) {
        if ((activated & (1 << i)) == 0) continue;
        if (ctxs[i].state == CHARGER_QUERYING_STATUS_STATE) {
          if (ctxs[i].retry == 0) {
            ctxs[i].state = charger_transform_state(ctxs[i].state, CHARGER_CMD_TIMEOUT_COMMA_RETRY_EQUALS_0_EVENT, &i);
          } else {
            ctxs[i].state = charger_transform_state(ctxs[i].state, CHARGER_CMD_TIMEOUT_COMMA_RETRY_GREATER_THAN_0_EVENT, &i);
          }
        } else if (ctxs[i].state == CHARGER_QUERYING_CONFIG_STATE) {
          if (ctxs[i].retry == 0) {
            ctxs[i].state = charger_transform_state(ctxs[i].state, CHARGER_CMD_TIMEOUT_COMMA_RETRY_EQUALS_0_EVENT, &i);
          } else {
            ctxs[i].state = charger_transform_state(ctxs[i].state, CHARGER_CMD_TIMEOUT_COMMA_RETRY_GREATER_THAN_0_EVENT, &i);
          }
        } else if (ctxs[i].state == CHARGER_CONFIGING_STATE) {
          if (ctxs[i].retry == 0) {
            ctxs[i].state = charger_transform_state(ctxs[i].state, CHARGER_CMD_TIMEOUT_COMMA_RETRY_EQUALS_0_EVENT, &i);
          } else {
            ctxs[i].state = charger_transform_state(ctxs[i].state, CHARGER_CMD_TIMEOUT_COMMA_RETRY_GREATER_THAN_0_EVENT, &i);
          }
        } else if (ctxs[i].state == CHARGER_SCANNING_STATE) {
          if (systick > ctxs[i].sync_timer) {
            ctxs[i].sync_timer = systick + ctxs[i].sync_interval;
            ctxs[i].state = charger_transform_state(ctxs[i].state, CHARGER_SYNC_TIMEOUT_EVENT, &i);
          }
        }
      }
    }
  }
#+end_src
** 协议回调
#+begin_src c :noweb-ref callback
  void charger_callback(uart4_packet_t * packet) {
    switch (packet->payload.charger.cmd) {
    case CHARGER_QUERY_STATUS_RESPONSE: {
      uint8_t idx = packet->devid - 1;
      activated |= 1 << idx;
      if ((packet->payload.charger.sn != 0) ||
          ((plugged[idx] ^ packet->payload.charger.plugged) +
           (charging[idx] ^ packet->payload.charger.charging) +
           (full[idx] ^ packet->payload.charger.full) +
           (heating[idx] ^ packet->payload.charger.heating) +
           (temperature[idx] ^ packet->payload.charger.temperature) +
           (errno[idx] ^ packet->payload.charger.errno) +
           (batteries[idx][0] ^ packet->payload.charger.batteries[0]) +
           (batteries[idx][1] ^ packet->payload.charger.batteries[1]) +
           (batteries[idx][2] ^ packet->payload.charger.batteries[2]) +
           (batteries[idx][3] ^ packet->payload.charger.batteries[3])) != 0) {
        ctxs[idx].pin = packet->payload.charger.sn;
        ctxs[idx].batteries_len = 4;
        plugged[idx] = packet->payload.charger.plugged;
        charging[idx] = packet->payload.charger.charging;
        full[idx] = packet->payload.charger.full;
        heating[idx] = packet->payload.charger.heating;
        temperature[idx] = packet->payload.charger.temperature;
        errno[idx] = packet->payload.charger.errno;
        batteries[idx][0] = packet->payload.charger.batteries[0];
        batteries[idx][1] = packet->payload.charger.batteries[1];
        batteries[idx][2] = packet->payload.charger.batteries[2];
        batteries[idx][3] = packet->payload.charger.batteries[3];
        ctxs[idx].state = charger_transform_state(ctxs[idx].state, CHARGER_QUERY_STATUS_ACK_COMMA_CHANGED_EVENT, &idx);
      } else {
        ctxs[idx].state = charger_transform_state(ctxs[idx].state, CHARGER_QUERY_STATUS_ACK_COMMA_NOT_CHANGED_EVENT, &idx);
      }
      break;
    }
    case CHARGER_QUERY_CONFIG_RESPONSE: {
      uint8_t idx = packet->devid - 1;
      activated |= 1 << idx;
      ctxs[idx].pin = packet->payload.charger.sn;
      ctxs[idx].enable_charging = packet->payload.charger.enable_charging;
      ctxs[idx].enable_heating = packet->payload.charger.enable_heating;
      ctxs[idx].state = charger_transform_state(ctxs[idx].state, CHARGER_QUERY_CONFIG_ACK_EVENT, &idx);
      break;
    }
    case CHARGER_CONFIG_RESPONSE: {
      uint8_t idx = packet->devid - 1;
      activated |= 1 << idx;
      ctxs[idx].pin = packet->payload.charger.sn;
      ctxs[idx].enable_charging = packet->payload.charger.enable_charging;
      ctxs[idx].enable_heating = packet->payload.charger.enable_heating;
      ctxs[idx].state = charger_transform_state(ctxs[idx].state, CHARGER_CONFIG_ACK_EVENT, &idx);
      break;
    }
    case CHARGER_FIREWARE_RESPONSE: {
      console_log("Upgrading charger fireware is not implemented\r\n");
      break;
    }
    default:
      console_log("Unknown command ");
      console_number(packet->payload.charger.cmd);
      console_string(" from charger ");
      console_number(packet->devid);
      console_newline();
      break;
    }
  }
#+end_src
** 状态机
#+begin_src c :noweb-ref fsm
  void charger_do_action(enum CHARGER_ACTION action, void * data) {
    uint8_t idx = * (uint8_t *) data;
    switch (action) {
    case CHARGER_SET_RETRY_EQUALS_2_NEWLINE_SET_CMD_TIMER_NEWLINE_SET_ACTIVATED_NEWLINE_QUERY_STATUS_ACTION:
    case CHARGER_SET_RETRY_EQUALS_2_NEWLINE_SET_CMD_TIMER_NEWLINE_SET_PIN_EQUALS_0_NEWLINE_QUERY_STATUS_ACTION:
      ctxs[idx].retry = 2;
      ctxs[idx].cmd_timer = systick + ctxs[idx].cmd_interval;
      if (action == CHARGER_SET_RETRY_EQUALS_2_NEWLINE_SET_CMD_TIMER_NEWLINE_SET_PIN_EQUALS_0_NEWLINE_QUERY_STATUS_ACTION) {
        ctxs[idx].pin = 0;
      } else if (action == CHARGER_SET_RETRY_EQUALS_2_NEWLINE_SET_CMD_TIMER_NEWLINE_SET_ACTIVATED_NEWLINE_QUERY_STATUS_ACTION) {
        activated |= (1 << idx);
      }
      query_status(idx + 1, ctxs[idx].pin);
      break;
    case CHARGER_SET_RETRY_EQUALS_2_NEWLINE_SET_CMD_TIMER_NEWLINE_SET_ACTIVATED_NEWLINE_QUERY_CONFIG_ACTION:
      ctxs[idx].retry = 2;
      ctxs[idx].cmd_timer = systick + ctxs[idx].cmd_interval;
      activated |= (1 << idx);
      query_config(idx + 1, ctxs[idx].pin);
      break;
    case CHARGER_SET_RETRY_EQUALS_2_NEWLINE_SET_CMD_TIMER_NEWLINE_SET_ACTIVATED_NEWLINE_CONFIG_ACTION:
      ctxs[idx].retry = 2;
      ctxs[idx].cmd_timer = systick + ctxs[idx].cmd_interval;
      activated |= (1 << idx);
      config(idx + 1, ctxs[idx].enable_charging, ctxs[idx].enable_heating, ctxs[idx].pin);
      break;
    case CHARGER_SET_ACTIVATED_NEWLINE_RESET_RETRY_NEWLINE_ACK_QUERY_STATUS_ACTION:
    case CHARGER_ACK_QUERY_STATUS_ACTION: {
      if (action == CHARGER_SET_ACTIVATED_NEWLINE_RESET_RETRY_NEWLINE_ACK_QUERY_STATUS_ACTION) {
        activated |= (1 << idx);
        ctxs[idx].retry = 2;
      }
      parameter_t confirm;
      bzero(&confirm, sizeof(parameter_t));
      confirm.sn = sn ++;
      confirm.cmd_type = CHARGER_STATUS;
      confirm.pin = ctxs[idx].pin;
      confirm.board = idx + 1;
      confirm.charger_plugged = plugged[idx];
      confirm.charger_charging = charging[idx];
      confirm.charger_full = full[idx];
      confirm.charger_heating = heating[idx];
      confirm.batteries = batteries[idx];
      confirm.__batteries_len = ctxs[idx].batteries_len;
      confirm.temperature = temperature[idx];
      confirm.errno = errno[idx];
      confirm.rssi = network_rssi;
      confirm.ber = network_ber;
      confirm.network_reset = (int) network_reset_times;
      confirm.network_shutdown = (int) network_shutdown_times;
      confirm.fireware_version = (SUB_VERSION << 8) | MAIN_VERSION;
  #ifdef LOCK_FC
      confirm.fireware_version |= (1 << (5 + 16));
  #endif
  #ifdef LOCK_DGZL
      confirm.fireware_version |= (1 << (4 + 16));
  #endif
  #ifdef EC20
      confirm.fireware_version |= (1 << (2 + 16));
  #endif
  #ifdef ESP8266
      confirm.fireware_version |= (1 << (1 + 16));
  #endif
      uint8_t confirm_size = packet_calculate_encode_size(&confirm);
      uint8_t ebuf[confirm_size];
      uint8_t bufsize = packet_encode(CONFIRM, uid, &confirm, ebuf, confirm_size);
      network_write(ebuf, bufsize);
      console_log("Confirm CHARGER-STATUS (");
      console_number(idx + 1);
      console_string(", pin: ");
      console_number(ctxs[idx].pin);
      console_string(")\r\n");

      break;
    }
    case CHARGER_SET_ACTIVATED_NEWLINE_RESET_RETRY_ACTION:
      activated |= 1 << idx;
      ctxs[idx].retry = 2;
      break;
    case CHARGER_RETRY_MINUS_1_NEWLINE_SET_CMD_TIMER_NEWLINE_QUERY_STATUS_ACTION:
      ctxs[idx].retry --;
      ctxs[idx].cmd_timer = systick + ctxs[idx].cmd_interval;
      query_status(idx + 1, ctxs[idx].pin);
      break;
    case CHARGER_ACK_QUERY_CONFIG_ACTION: {
      parameter_t confirm;
      bzero(&confirm, sizeof(parameter_t));
      confirm.sn = sn ++;
      confirm.cmd_type = CHARGER_CONFIG;
      confirm.pin = ctxs[idx].pin;
      confirm.board = idx + 1;
      confirm.enable_charging = ctxs[idx].enable_charging;
      confirm.enable_heating = ctxs[idx].enable_heating;
      confirm.rssi = network_rssi;
      confirm.ber = network_ber;
      confirm.network_reset = (int) network_reset_times;
      confirm.network_shutdown = (int) network_shutdown_times;
      confirm.fireware_version = (SUB_VERSION << 8) | MAIN_VERSION;
  #ifdef LOCK_FC
      confirm.fireware_version |= (1 << (5 + 16));
  #endif
  #ifdef LOCK_DGZL
      confirm.fireware_version |= (1 << (4 + 16));
  #endif
  #ifdef EC20
      confirm.fireware_version |= (1 << (2 + 16));
  #endif
  #ifdef ESP8266
      confirm.fireware_version |= (1 << (1 + 16));
  #endif
      uint8_t confirm_size = packet_calculate_encode_size(&confirm);
      uint8_t ebuf[confirm_size];
      uint8_t bufsize = packet_encode(CONFIRM, uid, &confirm, ebuf, confirm_size);
      network_write(ebuf, bufsize);
      console_log("Confirm CHARGER-CONFIG (");
      console_number(idx + 1);
      console_string(", pin: ");
      console_number(ctxs[idx].pin);
      console_string(")\r\n");
      break;
    }
    case CHARGER_RETRY_MINUS_1_NEWLINE_SET_CMD_TIMER_NEWLINE_QUERY_CONFIG_ACTION:
      ctxs[idx].retry --;
      ctxs[idx].cmd_timer = systick + ctxs[idx].cmd_interval;
      query_config(idx + 1, ctxs[idx].pin);
      break;
    case CHARGER_ACK_CONFIG_ACTION: {
      parameter_t confirm;
      bzero(&confirm, sizeof(parameter_t));
      confirm.sn = sn ++;
      confirm.cmd_type = CONFIG_CHARGER;
      confirm.pin = ctxs[idx].pin;
      confirm.board = idx + 1;
      confirm.enable_charging = ctxs[idx].enable_charging;
      confirm.enable_heating = ctxs[idx].enable_heating;
      confirm.rssi = network_rssi;
      confirm.ber = network_ber;
      confirm.network_reset = (int) network_reset_times;
      confirm.network_shutdown = (int) network_shutdown_times;
      confirm.fireware_version = (SUB_VERSION << 8) | MAIN_VERSION;
  #ifdef LOCK_FC
      confirm.fireware_version |= (1 << (5 + 16));
  #endif
  #ifdef LOCK_DGZL
      confirm.fireware_version |= (1 << (4 + 16));
  #endif
  #ifdef EC20
      confirm.fireware_version |= (1 << (2 + 16));
  #endif
  #ifdef ESP8266
      confirm.fireware_version |= (1 << (1 + 16));
  #endif
      uint8_t confirm_size = packet_calculate_encode_size(&confirm);
      uint8_t ebuf[confirm_size];
      uint8_t bufsize = packet_encode(CONFIRM, uid, &confirm, ebuf, confirm_size);
      network_write(ebuf, bufsize);
      console_log("Confirm CONFIG-CHARGER (");
      console_number(idx + 1);
      console_string(", pin: ");
      console_number(ctxs[idx].pin);
      console_string(")\r\n");

      break;
    }
    case CHARGER_RETRY_MINUS_1_NEWLINE_SET_CMD_TIMER_NEWLINE_CONFIG_ACTION:
      ctxs[idx].retry --;
      ctxs[idx].cmd_timer = systick + ctxs[idx].cmd_interval;
      config(idx + 1, ctxs[idx].enable_charging, ctxs[idx].enable_heating, ctxs[idx].pin);
      break;
    case CHARGER_CLEAR_CACHE_NEWLINE_SET_UNACTIVATED_ACTION:
      plugged[idx] = 0;
      charging[idx] = 0;
      full[idx] = 0;
      heating[idx] = 0;
      temperature[idx] = 0;
      errno[idx] = 0;
      batteries[idx][0] = 0;
      batteries[idx][1] = 0;
      batteries[idx][2] = 0;
      batteries[idx][3] = 0;
      if (action == CHARGER_CLEAR_CACHE_NEWLINE_SET_UNACTIVATED_ACTION) {
        activated &= ~(1 << (idx));
      }
      break;
    case CHARGER_SET_UNACTIVATED_ACTION:
      activated &= ~(1 << (idx));
      break;
    }
  }
#+end_src
** 查询充电器状态
#+begin_src c :noweb-ref query-charger-status
  static void query_status(uint8_t charger, uint16_t pin) {
    uart4_packet_t packet;
    bzero(&packet, sizeof(uart4_packet_t));
    packet.devid = charger;
    packet.devtype = CHARGER;
    packet.version = 0;
    packet.payload.charger.sn = pin;
    packet.payload.charger.cmd = CHARGER_QUERY_STATUS_REQUEST;
    packet.payload.charger.timestamp = timestamp;
    packet.payload.charger.fireware_version = 0;
    populate_uart4_packet_to_tx(&packet, charger_tx);
  }

  void charger_status(uint8_t charger, uint16_t pin) {
    uint8_t idx = charger - 1;
    ctxs[idx].pin = pin;
    ctxs[idx].state = charger_transform_state(ctxs[idx].state, CHARGER_QUERY_STATUS_EVENT, &idx);
  }
#+end_src
** 查询充电器配置
#+begin_src c :noweb-ref query-charger-config
  static void query_config(uint8_t charger, uint16_t pin) {
    uart4_packet_t packet;
    bzero(&packet, sizeof(uart4_packet_t));
    packet.devid = charger;
    packet.devtype = CHARGER;
    packet.version = 0;
    packet.payload.charger.sn = pin;
    packet.payload.charger.cmd = CHARGER_QUERY_CONFIG_REQUEST;
    packet.payload.charger.timestamp = timestamp;
    packet.payload.charger.fireware_version = 0;
    populate_uart4_packet_to_tx(&packet, charger_tx);
  }

  void charger_config(uint8_t charger, uint16_t pin) {
    uint8_t idx = charger - 1;
    ctxs[idx].pin = pin;
    ctxs[idx].state = charger_transform_state(ctxs[idx].state, CHARGER_QUERY_CONFIG_EVENT, &idx);
  }
#+end_src
** 配置充电器
#+begin_src c :noweb-ref config-charger
  static void config(uint8_t charger, uint8_t enable_charging, uint8_t enable_heating, uint16_t pin) {
    uart4_packet_t packet;
    bzero(&packet, sizeof(uart4_packet_t));
    packet.devid = charger;
    packet.devtype = CHARGER;
    packet.version = 0;
    packet.payload.charger.sn = pin;
    packet.payload.charger.cmd = CHARGER_CONFIG_REQUEST;
    packet.payload.charger.timestamp = timestamp;
    packet.payload.charger.fireware_version = 0;
    packet.payload.charger.enable_charging = enable_charging;
    packet.payload.charger.enable_heating = enable_heating;
    populate_uart4_packet_to_tx(&packet, charger_tx);
  }

  void charger_config_exclamation_marks(uint8_t charger, uint8_t enable_charging, uint8_t enable_heating, uint16_t pin) {
    uint8_t idx = charger - 1;
    ctxs[idx].pin = pin;
    ctxs[idx].enable_charging = enable_charging;
    ctxs[idx].enable_heating = enable_heating;
    ctxs[idx].state = charger_transform_state(ctxs[idx].state, CHARGER_CONFIG_EVENT, &idx);
  }
#+end_src
** 通讯协议
*** 命令编号
| 编号 | 名称                  | 说明         |
|------+-----------------------+--------------|
|    1 | query-status-request  | 查询状态     |
|    2 | query-statue-response | 查询状态响应 |
|    3 | query-config-request  | 查询配置     |
|    4 | query-config-response | 查询配置响应 |
|    5 | config-request        | 配置         |
|    6 | config-response       | 配置响应     |
|    7 | fireware-request      | 固件数据     |
|    8 | rireware-response     | 固件数据响应 |

#+begin_src c :noweb-ref charger-cmd
  typedef enum CHARGER_CMD_TYPE {
    CHARGER_UNKNOWN = 0x00,
    CHARGER_QUERY_STATUS_REQUEST = 0x01,
    CHARGER_QUERY_STATUS_RESPONSE = 0x02,
    CHARGER_QUERY_CONFIG_REQUEST = 0x03,
    CHARGER_QUERY_CONFIG_RESPONSE = 0x04,
    CHARGER_CONFIG_REQUEST = 0x05,
    CHARGER_CONFIG_RESPONSE = 0x06,
    CHARGER_FIREWARE_REQUEST = 0x07,
    CHARGER_FIREWARE_RESPONSE = 0x08,
  } charger_cmd_type_t;
#+end_src

*** 命令参数矩阵

| 命令         | 时间戳 | 固件版本 | 插上标志 | 充电中标志 | 充满标志 | 加热中标志 | 电量数组 | 温度 | 故障编码 | 充电启用 | 加热启用 | 片段编号 | 片段大小 | 片段校验 | 片段内容 |
|--------------+--------+----------+----------+------------+----------+------------+----------+------+----------+----------+----------+----------+----------+----------+----------|
| 查询状态     | ✓      |          |          |            |          |            |          |      |          |          |          |          |          |          |          |
| 查询状态响应 |        | ✓        | ✓        | ✓          | ✓        | ✓          | ✓        | ✓    | ✓        |          |          |          |          |          |          |
| 查询配置     | ✓      |          |          |            |          |            |          |      |          |          |          |          |          |          |          |
| 查询配置响应 |        | ✓        |          |            |          |            |          |      |          | ✓        | ✓        |          |          |          |          |
| 配置         | ✓      |          |          |            |          |            |          |      |          | ✓        | ✓        |          |          |          |          |
| 配置响应     |        | ✓        |          |            |          |            |          |      |          | ✓        | ✓        |          |          |          |          |
| 固件数据     | ✓      | ✓        |          |            |          |            |          |      |          |          |          | ✓        | ✓        | ✓        | [✓]      |
| 固件数据响应 |        | ✓        |          |            |          |            |          |      |          |          |          | ✓        | ✓        | ✓        |          |

注意：

1. 插上标志，充电中标志，充满标志，加热中标志，充电启用，加热启用这些
   参数均采用二进制设计，真为 1，假为 0。按充电通道编号，从低到高依次
   排列在一个字节中。通道 0 在最低位。

2. 当片段编号为 0 时，片段大小存放的是整个升级包的大小，片段检验存放的
   是整个升级包的检验值，片段内容此时为空。固件版本号是升级包的版本号。

*** 参数结构

#+begin_src lisp :tangle /dev/shm/boxos/charger.tr
  (struct charger-payload
    (int 0 sn) ;; 请求序列号
    (byte 1 cmd) ;; 命令编号
    (long 2 timestamp) ;; 时间戳
    (byte 3 fireware-version) ;; 固件版本号
    (byte 4 plugged) ;; 插入标志
    (byte 5 charging) ;; 充电中标志
    (byte 6 full) ;; 充满标志
    (byte 7 heating) ;; 加热中标志
    (byte* 8 batteries) ;; 电量
    (short 9 temperature) ;; 温度
    (long 10 errno) ;; 故障编码
    (byte 11 enable-charging) ;; 充电启用
    (byte 12 enable-heating) ;; 加热启用
    (short 13 slice-no) ;; 片段编号
    (short 14 slice-size) ;; 片段大小
    (int 15 slice-checksum) ;; 片段校验
    (byte* 16 slice) ;; 片段内容
    )
#+end_src
